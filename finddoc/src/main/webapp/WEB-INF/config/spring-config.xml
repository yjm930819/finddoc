<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- db연동을 위한 설정(spring jdbc) : Connection Pool로 수정 -->
	<beans:bean id="ds"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring" />
		<beans:property name="resourceRef" value="true" />
	</beans:bean>

	<!-- ViewResolver등록 -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>

	<!-- ============= Tiles사용================ -->
	<!-- 1. tiles 설정파일 인식시키기 -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- 2. Tiles View를 만들 수 있도록 ViewResolver등록하기 -->
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>

	<!-- ========== annotation을 위한 package등록================ -->
	<context:component-scan base-package="doc" />

	<!-- ============= mybatis사용================ -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds" />
		<beans:property name="configLocation"
			value="/WEB-INF/config/mybatis-config.xml" />
	</beans:bean>
	<beans:bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory" />
	</beans:bean>

	<!-- ==============파일업로드=========== -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="500000" />
		<beans:property name="defaultEncoding" value="UTF-8" />
	</beans:bean>

	<!-- ========== aop를 이용한 선언적 트랜잭션 처리================ -->
	<!-- 1. 트랜잭션 처리를 위해 제공하는 클래스를 등록 -->
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="ds" />
	</beans:bean>

	<!-- 2. DataSourceTransactionManager를 advice로 등록 -->
	<tx:advice id="transactionAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insertHadmin" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 3. aop처리 -->
	<aop:config>
		<aop:pointcut
			expression="execution(* doc.find.member.MemberServiceImpl.insertHadmin*(..))"
			id="txpointcut" />
		<!-- 실행시점이 명확할 때 aspect, 아닐 경우 advisor -->
		<aop:advisor advice-ref="transactionAdvice"
			pointcut-ref="txpointcut" />
	</aop:config>

	<!-- ===============인터셉터=================== -->
	<!-- <interceptors> <interceptor> <mapping path="/board/**" /> <mapping 
		path="/receipt/**" /> <mapping path="/user/**" /> <mapping path="/mypage/**"/> 
		<mapping path="/book/**"/> <beans:bean id="logincheckinterceptor" class="doc.find.login.LoginCheckInterceptor"></beans:bean> 
		</interceptor> </interceptors> -->

	<!-- validator등록 -->
	<beans:bean id="localValidator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

</beans:beans>








